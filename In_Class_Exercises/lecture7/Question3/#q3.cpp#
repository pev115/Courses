#include <cstdlib>
/* This program creates and prints out a linked list of strings. */ 

#include <iostream>
#include <cstdlib>
#include <cstring>
#using namespace std;

const int MAX_WORD_LENGTH = 80;

/* definition of a node */
struct Node;
typedef Node *Node_ptr;

struct Node
{
  char word[MAX_WORD_LENGTH];
  Node_ptr ptr_to_next_node;
};

/* Function to assign a linked list to "a_node" */
void assign_list(Node_ptr &a_list);

/* Function to assign a new dynamic node variable to "a_node" */
void assign_new_node(Node_ptr &a_node);

/* Function to print the strings in the list "a_node" */
void print_list(Node_ptr a_node);

/*Function which inserts a node containing "word_after" in the linked list "list",
 after the first occurrence of a node containing "a_word". If "list" does not contain such a node,
 the function leaves it unchanged. */
void add_after(Node_ptr &list, char a_word[], char word_after[]);
void  point_to_correct_node(Node_ptr &findnode,char find_word[]);

/*Function which deletes the first node in "a_list" which contains "a_word".*/
void delete_node(Node_ptr &a_list, char a_word[]);
void  point_to_correct_node(Node_ptr &findnode,Node_ptr &findnodebefore, char find_word[]);

void list_selection_sort(Node_ptr &a_list);
bool  order(char string1[], char string2[]);
void findmin(Node_ptr& minpointer);
void swap(Node_ptr & pivot, Node_ptr& minpointer);

/* MAIN PROGRAM */
int main()
{
  Node_ptr my_list = NULL;
  char word_after[MAX_WORD_LENGTH];
  char a_word[MAX_WORD_LENGTH];

  assign_list(my_list);

  cout << "\nTHE LIST IS NOW:\n";
  print_list(my_list);

  cout<<endl<<"AFTER WHICH WORD WOULD YOU LIKE TO ADD AN EXTRA WORD?";
  cin>> word_after;
  
  cout<<endl<<"WHICH WORD WOULD YOU LIKE TO ADD? ";
  cin>>a_word;
  
  add_after(my_list,a_word,word_after); 

  cout<<endl<<"THE LIST IS NOW: "<<endl;
  print_list(my_list);

  cout<<endl<<"WHICH WORD WOULD YOU LIKE TO DELETE?";
  cin>>a_word;
  
  delete_node(my_list, a_word);

  cout<<endl<<"THE LIST IS NOW: "<<endl;
  print_list(my_list);

  list_selection_sort(my_list);

  cout<<endl<<"THE LIST IS NOW: "<<endl;
  print_list(my_list);

  cout<<endl;			
  return 0;
}
/* END OF MAIN PROGRAM */
	
/* DEFINITION OF FUNCTION "assign_list" */
void assign_list(Node_ptr &a_list)
{
  Node_ptr current_node, last_node;
	
  assign_new_node(a_list);
  cout << "Enter first word (or '.' to end list): ";
  cin >> a_list->word;
  if (!strcmp(".",a_list->word))
    {
      delete a_list;
      a_list = NULL;
    }
  current_node = a_list;
	
  while (current_node != NULL)
    {
      assign_new_node(last_node);
      cout << "Enter next word (or '.' to end list): ";
      cin >> last_node->word;
      if (!strcmp(".",last_node->word))
	{
	  delete last_node;
	  last_node = NULL;
	}
      current_node->ptr_to_next_node = last_node;
      current_node = last_node;
    }
}	
/* END OF FUNCTION DEFINITION */

/* DEFINITION OF FUNCTION "assign_new_node" */
void assign_new_node(Node_ptr &a_node)
{
  a_node = new (nothrow) Node;
  if (a_node == NULL) 
    {
      cout << "sorry - no more memory\n"; 
      exit(1);
    }
}
/* END OF FUNCTION DEFINITION */

/* DEFINITION OF FUNCTION "print_list" */
void print_list(Node_ptr a_node)
{
  while (a_node != NULL)
    {
      cout << a_node->word << " ";
      a_node = a_node->ptr_to_next_node;
    }
}
/* END OF FUNCTION DEFINITION */





void add_after(Node_ptr &list, char a_word[], char word_after[]){
  
  Node_ptr findnode; findnode=list;
  Node_ptr newnode;
  
  point_to_correct_node(findnode,word_after); 
  if (findnode == NULL){
    cout<<"The word "<<word_after<< " was not found in the list."<<endl;
    return;
  }

  assign_new_node(newnode);
  strcpy( newnode->word ,a_word);
  newnode->ptr_to_next_node = findnode->ptr_to_next_node;
  findnode->ptr_to_next_node= newnode;


}

void  point_to_correct_node(Node_ptr &findnode, char find_word[]){

  while(findnode!=NULL){
    if(!strcmp(findnode->word,find_word)){
      return;
    }
    findnode= findnode->ptr_to_next_node;
  }

}




void delete_node(Node_ptr &a_list, char a_word[]){

  
  Node_ptr findnode;
  Node_ptr findnodebefore;
  
  findnode=a_list;
  findnodebefore =a_list;
  
  point_to_correct_node(findnode,findnodebefore, a_word);
  if (findnode == NULL){
    cout<<"The word "<<a_word<< " was not found in the list."<<endl;
    return;
  }

  findnodebefore->ptr_to_next_node =findnode->ptr_to_next_node;
  delete findnode;
  




}



void  point_to_correct_node(Node_ptr &findnode,Node_ptr &findnodebefore, char find_word[]){

  while(findnode!=NULL){
    if(!strcmp(findnode->word,find_word)){
      return;
    }
    findnodebefore =findnode;
    findnode= findnode->ptr_to_next_node;
  }

}









void list_selection_sort(Node_ptr &a_list){
  Node_ptr pivot;
  Node_ptr minpointer;
 

  pivot= a_list;
  minpointer = a_list;
 

  while(pivot!=NULL){
    findmin(minpointer);
    swap(pivot,minpointer);
    pivot= pivot->ptr_to_next_node;
    minpointer=pivot;
    }
}


void findmin(Node_ptr& minpointer){
  Node_ptr searcher;
  searcher = minpointer;
  while(searcher!=NULL){
    if( order(searcher->word, minpointer->word)){
      minpointer=searcher;
    }
    searcher=searcher->ptr_to_next_node;
  }

}


bool  order(char string1[], char string2[])  {
  int count;
  int size1 = strlen(string1);
  int size2 =strlen(string2);
  
  if( size1> size2){
    count = size2;
  }else{count = size1;}
  

  for(int i=0;i<count;i++){
    if(string1[i]!= string2[i]){
      return ( *(string1+i) <*(string2+i)) ?  true :  false ; }
    
  }
  return (size1<size2)? true: false; 
}

void    swap(Node_ptr & pivot, Node_ptr& minpointer){

  Node_ptr temp;
  assign_new_node(temp);
  strcpy(temp->word,minpointer->word);
  strcpy( minpointer->word,pivot->word);
  strcpy( pivot->word , temp->word);
  

}









/*

void selection_sort(char a[], int length)
{
  for (int count = 0 ; count < length - 1 ; count++)
    swap(a[count],a[minimum_from(a,count,length)]);
}
	
int minimum_from(int a[], int position, int length)
{
  int min_index = position;
	
  for (int count = position + 1 ; count < length ; count ++)
    if (a[count] < a[min_index])
      min_index = count;
	
  return min_index;
}
	
void swap(int& first, int& second)
{
  int temp = first;
  first = second;
  second = temp;
}
*/








